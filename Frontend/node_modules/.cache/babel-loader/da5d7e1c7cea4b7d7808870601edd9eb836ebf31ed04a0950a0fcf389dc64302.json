{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dal_project\\\\Advance_Cloud_5409\\\\TA\\\\frontend\\\\src\\\\Components\\\\userLogin.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../Styles/userLogin.css'; // Import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginForm() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [usernameError, setUsernameError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [loginSuccess, setLoginSuccess] = useState(false);\n\n  // Validation function for username format\n  const validateUsername = username => {\n    // Username should be at least 3 characters long\n    return username.length >= 3;\n  };\n\n  // Validation function for password format\n  const validatePassword = password => {\n    // Password should be at least 8 characters long and contain at least one uppercase letter and one numeric digit\n    const passwordPattern = /^(?=.*[A-Z])(?=.*\\d).{8,}$/;\n    return passwordPattern.test(password);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Reset error messages and login success message\n    setUsernameError('');\n    setPasswordError('');\n    setLoginSuccess(false);\n\n    // Check username format\n    if (!validateUsername(username)) {\n      setUsernameError('Username should be at least 3 characters long');\n      return;\n    }\n\n    // Check password format\n    if (!validatePassword(password)) {\n      setPasswordError('Password should be at least 8 characters long and contain at least one uppercase letter and one numeric digit');\n      return;\n    }\n\n    // If all validations pass, send a login request to your backend API\n    try {\n      const response = await fetch('https://ing0p7y9va.execute-api.us-east-1.amazonaws.com/user-login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (response.ok) {\n        // Login was successful\n        setLoginSuccess(true);\n      } else {\n        // Login failed, handle the error\n        // You can display an error message to the user based on the response status or content\n        console.error('Login failed');\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"username\",\n            children: \"Username:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"username\",\n            type: \"text\",\n            value: username,\n            onChange: e => setUsername(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), usernameError && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error\",\n            children: usernameError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"password\",\n            type: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), passwordError && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error\",\n            children: passwordError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), loginSuccess ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"success\",\n          children: \"Login success!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"login-button\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginForm, \"YPPr0v3OCMzKi32dvF13kkHjjjY=\");\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","LoginForm","_s","username","setUsername","password","setPassword","usernameError","setUsernameError","passwordError","setPasswordError","loginSuccess","setLoginSuccess","validateUsername","length","validatePassword","passwordPattern","test","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","id","type","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Dal_project/Advance_Cloud_5409/TA/frontend/src/Components/userLogin.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../Styles/userLogin.css'; // Import your CSS file\r\n\r\nfunction LoginForm() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [usernameError, setUsernameError] = useState('');\r\n  const [passwordError, setPasswordError] = useState('');\r\n  const [loginSuccess, setLoginSuccess] = useState(false);\r\n\r\n  // Validation function for username format\r\n  const validateUsername = (username) => {\r\n    // Username should be at least 3 characters long\r\n    return username.length >= 3;\r\n  };\r\n\r\n  // Validation function for password format\r\n  const validatePassword = (password) => {\r\n    // Password should be at least 8 characters long and contain at least one uppercase letter and one numeric digit\r\n    const passwordPattern = /^(?=.*[A-Z])(?=.*\\d).{8,}$/;\r\n    return passwordPattern.test(password);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Reset error messages and login success message\r\n    setUsernameError('');\r\n    setPasswordError('');\r\n    setLoginSuccess(false);\r\n\r\n    // Check username format\r\n    if (!validateUsername(username)) {\r\n      setUsernameError('Username should be at least 3 characters long');\r\n      return;\r\n    }\r\n\r\n    // Check password format\r\n    if (!validatePassword(password)) {\r\n      setPasswordError('Password should be at least 8 characters long and contain at least one uppercase letter and one numeric digit');\r\n      return;\r\n    }\r\n\r\n    // If all validations pass, send a login request to your backend API\r\n    try {\r\n      const response = await fetch('https://ing0p7y9va.execute-api.us-east-1.amazonaws.com/user-login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Login was successful\r\n        setLoginSuccess(true);\r\n      } else {\r\n        // Login failed, handle the error\r\n        // You can display an error message to the user based on the response status or content\r\n        console.error('Login failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <div className=\"login-form\">\r\n        <h2>Login</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"username\">Username:</label>\r\n            <input\r\n              id=\"username\"\r\n              type=\"text\"\r\n              value={username}\r\n              onChange={(e) => setUsername(e.target.value)}\r\n            />\r\n            {usernameError && <div className=\"error\">{usernameError}</div>}\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"password\">Password:</label>\r\n            <input\r\n              id=\"password\"\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n            {passwordError && <div className=\"error\">{passwordError}</div>}\r\n          </div>\r\n          {loginSuccess ? (\r\n            <div className=\"success\">Login success!</div>\r\n          ) : (\r\n            <button type=\"submit\" className=\"login-button\">\r\n              Login\r\n            </button>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default LoginForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}